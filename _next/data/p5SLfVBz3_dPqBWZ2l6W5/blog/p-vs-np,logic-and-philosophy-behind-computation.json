{"pageProps":{"mdxSource":{"compiledSource":"var h=Object.defineProperty,c=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var p=(e,t,n)=>t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,o=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&p(e,n,t[n]);if(r)for(var n of r(t))i.call(t,n)&&p(e,n,t[n]);return e},m=(e,t)=>c(e,g(t));var l=(e,t)=>{var n={};for(var a in e)s.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&r)for(var a of r(e))t.indexOf(a)<0&&i.call(e,a)&&(n[a]=e[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,t=l(a,[\"components\"]);return mdx(MDXLayout,m(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"img\",{alt:\"Banner\",src:\"/static/images/pvsnp-intro/banner.png\",width:1200,height:600,priority:!0}),mdx(\"p\",null,\"This is my First Article, Here I try to present Intuition and foundational philosophy of computation to CS and non-CS students alike. I try to make the theory as simple as possible but not simpler that takes the aesthetics away.  references are mentioned at footer. \"),mdx(\"h3\",o({},{id:\"what-is-computation\"}),mdx(\"a\",o({parentName:\"h3\"},{href:\"#what-is-computation\",className:\"anchor\"}),mdx(\"span\",o({parentName:\"a\"},{className:\"icon icon-link\"}))),\"What is computation?\"),mdx(\"p\",null,\"Computer science isn\\u2019t just limited to computers and electronic devices. Famous Computer Scientist Edsger Dijkstra once said, \\u201Ccomputer science has as much to do with computers as astronomy has to do with telescopes\\u201D.  like the natural sciences, computer science also has a solid philosophical background. \"),mdx(\"p\",null,\"quoting Scott Aaronson \\u201Ccomputer science is a mathematical set of tools, or body of ideas, for understanding just about any system\\u2014brain, universe, living organism, or, yes, computer. \\u201D\"),mdx(\"p\",null,\"A Physicist seeks out \\u201CThe rules of nature, with varying scale from subatomic to cosmic and often It happens by finding a general rule, and then they will try to find deeper rules that makes the general rule stable in a top-down approach\\u201D.\"),mdx(\"p\",null,\"A Computer scientist seeks out \\u201CHow hard is the system built by these rules? we typically take stable simple systems and try to form more complex systems in a bottom-up approach\\u201D. There is also a fundamental question that drives a computer scientist, \\u201Cwhy some problems are Harder than others?\\u201D and we try to look for mathematical structures, logical models that helps us in interpreting the problems and try to solve them (or) gain Intuition along the way.\"),mdx(\"p\",null,\"But what is Hardness? we had to give a metric to classify some problems as hard while others as relatively simple and also is every problem solvable?The answer to the second question is, \\u201CNO\\u201D. let\\u2019s try to formalize this, for that let\\u2019s have a brief about turing machine, \\u201CTuring machine is an abstract mathematical model that takes an input, performs some basic operations, writes output and halts (stops)\\u201D. computers are built with the notion of turing machine ( but not perfectly because computers have finite memory while turing machine is theorized to have infinite memory ) but any computer can be converted to a Turing machine. There are many variants of Turing machine but each of them can be converted to a deterministic Turing machine with more time penalty.\"),mdx(\"img\",{alt:\"Turing machine to practical devices\",src:\"/static/images/pvsnp-intro/tm-to-pc.png\",width:1440,height:900}),mdx(\"img\",{alt:\"Different complexity realizations\",src:\"/static/images/pvsnp-intro/complexity-practical.png\",width:1440,height:900}),mdx(\"p\",null,\"So, As the turing machines are very powerful, we take turing machine as the computational model for computational theory and complexity theory.\"),mdx(\"p\",null,\"To solve a problem, we take input perform operations and create an output. the set of all possible inputs of the problem is called a \\u201Clanguage\\u201D mostly infinite. a language is called decidable, If a turing machine can output \\u201CYes\\u201D or \\u201CNo\\u201D and halt on every input from the language.\"),mdx(\"p\",null,\"Tracing back, some problems are inherently Unsolvable ( Undecidable ), one such is the infamous Halting problem.Halting problem is an undecidable problem where given a turing machine description, input, we should determine whether the turing machine halts on that input. like a general algorithm that can determine whether a turing machine halts or goes into an infinite loop on an input. there is a nice proof to prove this via contradiction, but I\\u2019m not explaining it as it doesn\\u2019t help in our P vs NP quest.\"),mdx(\"p\",null,\"So, Tracing back Answering the first question, we classify the problems by their factors like solvability, time requirement, space requirement, computational model.\"),mdx(\"p\",null,\"Here, I need to specify the difference between a deterministic turing machine, non-deterministic turing machine. in essence, determinism here specifies being able to do only one operation at a time, in non-determinism you perform correct operation at every instant without searching through possibilities. in reality, non-deterministic machines aren\\u2019t possible. but as we said earlier, every non-deterministic turing machine can be converted into a deterministic turing machine with time penalty.\"),mdx(\"h3\",o({},{id:\"complexity-classes\"}),mdx(\"a\",o({parentName:\"h3\"},{href:\"#complexity-classes\",className:\"anchor\"}),mdx(\"span\",o({parentName:\"a\"},{className:\"icon icon-link\"}))),\"Complexity classes\"),mdx(\"p\",null,\"moving on,\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"P\"),\" is the set of all problems that can be solved in polynomial time ( at most \",mdx(\"strong\",{parentName:\"p\"},\"N^k\"),\") on a deterministic turing machine where, N is the length of input, k is a constant.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" is the set of all problems that can be solved in polynomial time ( at most \",mdx(\"strong\",{parentName:\"p\"},\"N^k\"),\") on a non-deterministic turing machine.\"),mdx(\"p\",null,\"key thing to note here, is that every \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" class problems can be solved in exponential time at most ( at most \",mdx(\"strong\",{parentName:\"p\"},\"2^(N^k)\"),\" ) time on a deterministic turing machine.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"EXPTIME\"),\" is the set of all problems that can be solved in exponential time ( at most \",mdx(\"strong\",{parentName:\"p\"},\"2^(N^k)\"),\") on a deterministic turing machine.so, \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" \\u2286 \",mdx(\"strong\",{parentName:\"p\"},\"EXPTIME\"),\" \"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"NP-complete\"),\" is the set of \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problems which can be converted to every other \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problem can be in a polynomial time penalty. If we want to prove one \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problem as \",mdx(\"strong\",{parentName:\"p\"},\"NP-complete\"),\", we need not to prove every \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problem being reduceable to that problem we can just prove that \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problem can reduced into \",mdx(\"strong\",{parentName:\"p\"},\"NP-complete\"),\". Note that above, I used convertible, reduceable interchangeably.\"),mdx(\"p\",null,\"the hierarchy,\"),mdx(\"img\",{alt:\"P vs NP\",src:\"/static/images/pvsnp-intro/pvsnp.png\",width:1e3,height:600}),mdx(\"p\",null,\"there are also, other complexity classes like \",mdx(\"strong\",{parentName:\"p\"},\"NP-Hard\"),\" ( problem set to which every \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problem can be reduced to whether \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" or not ), \",mdx(\"strong\",{parentName:\"p\"},\"PSPACE\"),\" ( analogous to \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" in space ), \",mdx(\"strong\",{parentName:\"p\"},\"NPSPACE\"),\" ( analogous to \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" in space ), before defined \",mdx(\"strong\",{parentName:\"p\"},\"EXPTIME\"),\" ( \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" \\u2286 \",mdx(\"strong\",{parentName:\"p\"},\"EXPTIME\"),\" ), \",mdx(\"strong\",{parentName:\"p\"},\"NEXPTIME\"),\" ( analogous to \",mdx(\"strong\",{parentName:\"p\"},\"EXPTIME\"),\" for \",mdx(\"strong\",{parentName:\"p\"},\"NDTM\"),\" ), etc. but we don\\u2019t need them to introduce \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" vs \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\".\"),mdx(\"p\",null,\"One Important thing to note, is even though \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problems require exponential time to solve, they require only polynomial time to be verified. i.e, we can think \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" class problems are easier to solve, easier to verify and \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problems are harder to solve but easier to verify. \"),mdx(\"p\",null,\"Even though we aren\\u2019t able to prove \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" vs \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" \"),mdx(\"p\",null,\"But with time hierarchy theorem,  we proved that, \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\"\\xA0\\u228A\\xA0\",mdx(\"strong\",{parentName:\"p\"},\"EXPTIME\"),\"\\xA0\\u228A\\xA0\",mdx(\"strong\",{parentName:\"p\"},\"2-EXP\"),\"\\xA0\\u228A ... and\\xA0\",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\"\\xA0\\u228A\\xA0\",mdx(\"strong\",{parentName:\"p\"},\"NEXPTIME\"),\"\\xA0\\u228A\\xA0\",mdx(\"strong\",{parentName:\"p\"},\"2-NEXP\"),\" \\u2026\"),mdx(\"p\",null,\"which can be helpful in solving \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" vs \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\".\"),mdx(\"h3\",o({},{id:\"p-vs-np--the-holy-grail-of-computer-science-\"}),mdx(\"a\",o({parentName:\"h3\"},{href:\"#p-vs-np--the-holy-grail-of-computer-science-\",className:\"anchor\"}),mdx(\"span\",o({parentName:\"a\"},{className:\"icon icon-link\"}))),\"P vs NP ( the holy grail of computer science )\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"P\"),\" vs \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" is about figuring out whether \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" = \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" or \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" \\u2260 \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\". It\\u2019s is not just a mathematical problem but a philosophical one, \\u201CIs finding solutions harder than verifying them?\\u201D ( since \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" class problems can be solved easier, \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" class problem are verified easier ).\"),mdx(\"p\",null,\"we might think intuitively, \\u201Cfinding solutions is harder than verifying solutions\\u201D like \\u201Cwriting a great poem should be harder than checking a great poem\\u201D. Even the famous physicist Feynman had trouble even being convinced that \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" vs. \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" was an open problem!\"),mdx(\"p\",null,\"Because, All \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problems require brute-force search ( searching all possible states for solution ) which results in the exponential time requirement. So to believe \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" = \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\", we need to assume there is a general efficient way to solve every \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problem. which is also a hard thing to assume against our Intuition.\"),mdx(\"p\",null,\"we generally believe the conjecture that \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" \\u2260 \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" but It\\u2019s very HARD to prove it!!\"),mdx(\"p\",null,\"because, \\u201CA fundamental challenge when proving \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" \\u2260 \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" is that, we have to separate \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" problems that are actually HARD from the problems that just look HARD or used to be assumed HARD\\u201D. problems like primality testing, DNA sequencing which were assumed to be \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" are now in \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\". the proofs that tried to prove, \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" \\u2260 \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" can be rejected with this simple reason. as If we were to believe they work, then these polynomial reducible problems shouldn\\u2019t exist in the first place!\"),mdx(\"p\",null,\"We can however reduce scope to make our proof more stable, here \",mdx(\"strong\",{parentName:\"p\"},\"NP-complete\"),\" comes into picture. remember that any \",mdx(\"strong\",{parentName:\"p\"},\"NP-complete\"),\" problem can be converted into any \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" class problem. so, If we\\u2019re able to prove one \",mdx(\"strong\",{parentName:\"p\"},\"NP-complete\"),\" problem is equal to (or) not equal to \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\". we prove all problems of \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" are equal to (or) not equal to \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\".\"),mdx(\"p\",null,\"Repercussions of proving \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" = \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" are massive, If \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" = \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" many other complexity classes fall into \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" as well like \",mdx(\"strong\",{parentName:\"p\"},\"co-NP\"),\",  \",mdx(\"strong\",{parentName:\"p\"},\"\\u03A0k P\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"\\u03A3k P\"),\".\"),mdx(\"p\",null,\"with \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" = \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\", \"),mdx(\"p\",null,\"any reasonable length mathematical proof can be found efficiently by an algorithm! ( because even though in polynomial \",mdx(\"strong\",{parentName:\"p\"},\"N^k\"),\", if the k is big It would be inefficient ). \"),mdx(\"p\",null,\"the idea that such problem is in \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" was actually pointed out by Kurt Godel in his 1956  letter to von neumann. he wrote, \\u201CConsider the problem of deciding whether a mathematical statement S has a proof in F with n symbols or fewer. we could always just program a computer to search through all \",mdx(\"strong\",{parentName:\"p\"},\"2^n\"),\" possible bit-strings with n symbols, and check whether any of them encodes a valid F-proof of S.\\u201D\"),mdx(\"p\",null,\"Godel also pointed out, \\u201Cit\\u2019s far from obvious how to prove that there isn\\u2019t a muchbetter approach: an approach that would avoid brute-force search, and find proofs of size n in time polynomial in n\\u201D. essentially discussing, proving \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" \\u2260 \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" is HARD. the formal conjecture of \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" vs \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" was formulated by cook in his 1971 paper.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"P\"),\" = \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\" will also mean AI would be perfect as we can simply search large tree of possibilities in polynomial time. VLSI designers can design optimum circuits with minimum power requirements. any scientist can obtain the simplest theory that explains his/her experimental data, by Occam\\u2019s razor this is supposed to be the correct one! \"),mdx(\"p\",null,\"as said earlier in summary, \\u201CAny problem whose solution that can be verified easily, can be produced approximately that much easily\\u201D.\"),mdx(\"p\",null,\"It may also rule out the need of randomized algorithms, stochasticity principle as the gains will be negligible.\"),mdx(\"p\",null,\"On the other hand, all our cryptographic algorithms are designed with the assumption of existence of one-way functions which in turn assumes \",mdx(\"strong\",{parentName:\"p\"},\"P\"),\" \\u2260 \",mdx(\"strong\",{parentName:\"p\"},\"NP\"),\". so, there can be trivial decoding algorithms for every cryptographic algorithm, causing vulnerability to our security, privacy, data integrity.\"),mdx(\"p\",null,\"so, this is the explanation I felt sufficient for intuitively understanding complexity. because, I saw even experienced people having confusion over these ( cough cough tutorialspoint guy ).\"),mdx(\"p\",null,\"the main intention of writing this article, is to introduce these concepts intuitively to wider audience and to give motivation to CS students that they\\u2019re doing something really fundamental than just programming stuff. sadly, I was introduced to these concepts just before couple of months in my final year of Btech. had I been introduced to these earlier, It might\\u2019ve had significant impact in my formative years of undergraduation. which I hope happens to someone else. remember to get away from your engineering lens to a scientist lens once in a while. \"),mdx(\"p\",null,\"an engineer will accept the rules they\\u2019re given and try to solve problems with those rules, a scientist will question the rules itself. a mechanical engineer may design machines without realizing that forces are illusion but a physicist would realize that. similarly, a software engineer will develop algorithms without realizing the underlying assumptions.\"),mdx(\"p\",null,\"there are potential things that I missed (or) trivialized above for better understanding. as I\\u2019m fairly inexperienced, if there\\u2019re any errors above feel free to point out by my twitter handle. \"),mdx(\"h3\",o({},{id:\"references\"}),mdx(\"a\",o({parentName:\"h3\"},{href:\"#references\",className:\"anchor\"}),mdx(\"span\",o({parentName:\"a\"},{className:\"icon icon-link\"}))),\"References:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Introduction to the theory of computation - M Sipser\"),mdx(\"li\",{parentName:\"ol\"},\"The history and status of P versus NP Question - M Sipser\"),mdx(\"li\",{parentName:\"ol\"},\"Computational complexity a modern approach - S Arora, B Barak\"),mdx(\"li\",{parentName:\"ol\"},\"The nature of computation - C Moore, S Mertens\"),mdx(\"li\",{parentName:\"ol\"},\"What can be computed? - J MacCormick\"),mdx(\"li\",{parentName:\"ol\"},\"Why Philosophers Should Care About Computational Complexity  - S Aaronson\"),mdx(\"li\",{parentName:\"ol\"},\"Quantum computing since democritus - S Aaronson\"),mdx(\"li\",{parentName:\"ol\"},\"Automata, Computability, and Complexity, MIT 2011 - S Aaronson\")))}MDXContent.isMDXComponent=!0;\n","scope":{}},"tweetIDs":[],"frontMatter":{"wordCount":1930,"readingTime":{"text":"10 min read","minutes":9.595,"time":575700,"words":1919},"slug":"p-vs-np,logic-and-philosophy-behind-computation","title":"P vs NP, Logic and Philosophy Behind Computation","publishedAt":"2021-06-18","summary":"Intuition and foundational philosophy of computation","image":"/static/images/pvsnp-intro/banner.png"},"tweets":[]},"__N_SSG":true}